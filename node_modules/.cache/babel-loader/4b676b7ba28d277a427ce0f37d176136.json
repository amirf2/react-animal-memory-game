{"ast":null,"code":"var _jsxFileName = \"C:\\\\boiling-meadow-62855\\\\src\\\\Components\\\\MemoryGame.js\";\nimport React, { Component } from 'react';\nimport { shuffle } from '../utils';\nimport Image from './Image';\nimport logo from '../Resources/logo.png';\n\nclass MemoryGame extends Component {\n  constructor() {\n    super();\n\n    this.handleClick = imageID => {\n      const _this$state = this.state,\n            images = _this$state.images,\n            selectedImages = _this$state.selectedImages,\n            foundPairs = _this$state.foundPairs; //do logic only if the image is not already guessed or selected \n\n      if (!(foundPairs.includes(images[imageID]) || selectedImages.includes(images[imageID]))) {\n        //if it's the first image of the guessed pair then just add it to the array\n        if (selectedImages.length === 0) {\n          this.setState({\n            selectedImages: [images[imageID]]\n          }); //if it's is the second image of the guessed pair then check if both images are equal and reset selected images\n        } else if (selectedImages.length === 1) {\n          this.setState(prevState => {\n            return {\n              selectedImages: [...prevState.selectedImages, images[imageID]]\n            };\n          }, () => {\n            this.setState(prevState => {\n              const selectedImages = prevState.selectedImages,\n                    foundPairs = prevState.foundPairs;\n\n              if (selectedImages[0].url === selectedImages[1].url) {\n                return {\n                  foundPairs: [...foundPairs, selectedImages[0], selectedImages[1]],\n                  selectedImages: []\n                };\n              } else setTimeout(() => {\n                this.setState({\n                  selectedImages: []\n                });\n              }, 3000);\n            });\n          });\n        }\n      }\n    };\n\n    this.state = {\n      images: [],\n      selectedImages: [],\n      foundPairs: []\n    };\n  }\n\n  componentDidMount() {\n    var key = 0;\n    var urls = [];\n\n    for (var i = 0; i < 12; i++) {\n      urls.push({\n        key: key++,\n        url: \"Cats/\" + i + \".jpg\"\n      });\n      urls.push({\n        key: key++,\n        url: \"Cats/\" + i + \".jpg\"\n      });\n    }\n\n    shuffle(urls);\n    this.setState({\n      images: urls\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          images = _this$state2.images,\n          selectedImages = _this$state2.selectedImages,\n          foundPairs = _this$state2.foundPairs;\n    var imagesComp = images.map(element => {\n      return React.createElement(Image, {\n        key: element.key,\n        id: element.key,\n        image: element.url,\n        handleClick: this.handleClick,\n        found: foundPairs.includes(element),\n        selected: selectedImages.includes(element),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      alt: \"loading\",\n      class: \"image responsive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row mt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, imagesComp))));\n  }\n\n}\n\nexport default MemoryGame;","map":{"version":3,"sources":["C:/boiling-meadow-62855/src/Components/MemoryGame.js"],"names":["React","Component","shuffle","Image","logo","MemoryGame","constructor","handleClick","imageID","state","images","selectedImages","foundPairs","includes","length","setState","prevState","url","setTimeout","componentDidMount","key","urls","i","push","render","imagesComp","map","element"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,UAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;AAGA,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AAE/BK,EAAAA,WAAW,GAAE;AACT;;AADS,SASXC,WATW,GASIC,OAAD,IAAa;AAAA,0BACoB,KAAKC,KADzB;AAAA,YAClBC,MADkB,eAClBA,MADkB;AAAA,YACVC,cADU,eACVA,cADU;AAAA,YACMC,UADN,eACMA,UADN,EAEzB;;AACA,UAAI,EAAEA,UAAU,CAACC,QAAX,CAAoBH,MAAM,CAACF,OAAD,CAA1B,KAAwCG,cAAc,CAACE,QAAf,CAAwBH,MAAM,CAACF,OAAD,CAA9B,CAA1C,CAAJ,EAAwF;AACtF;AACA,YAAIG,cAAc,CAACG,MAAf,KAAwB,CAA5B,EAA8B;AAC5B,eAAKC,QAAL,CAAc;AAACJ,YAAAA,cAAc,EAAE,CAACD,MAAM,CAACF,OAAD,CAAP;AAAjB,WAAd,EAD4B,CAE9B;AACC,SAHD,MAGO,IAAIG,cAAc,CAACG,MAAf,KAAwB,CAA5B,EAA8B;AACjC,eAAKC,QAAL,CAAeC,SAAD,IAAe;AAC3B,mBAAO;AAACL,cAAAA,cAAc,EAAE,CAAC,GAAGK,SAAS,CAACL,cAAd,EAA6BD,MAAM,CAACF,OAAD,CAAnC;AAAjB,aAAP;AACD,WAFD,EAEI,MAAM;AACA,iBAAKO,QAAL,CAAeC,SAAD,IAAc;AAAA,oBAClBL,cADkB,GACYK,SADZ,CAClBL,cADkB;AAAA,oBACFC,UADE,GACYI,SADZ,CACFJ,UADE;;AAE1B,kBAAID,cAAc,CAAC,CAAD,CAAd,CAAkBM,GAAlB,KAAwBN,cAAc,CAAC,CAAD,CAAd,CAAkBM,GAA9C,EAAkD;AAC9C,uBAAO;AACLL,kBAAAA,UAAU,EAAE,CAAC,GAAGA,UAAJ,EAAeD,cAAc,CAAC,CAAD,CAA7B,EAAiCA,cAAc,CAAC,CAAD,CAA/C,CADP;AAELA,kBAAAA,cAAc,EAAE;AAFX,iBAAP;AAIH,eALD,MAKOO,UAAU,CAAC,MAAM;AACpB,qBAAKH,QAAL,CAAc;AAACJ,kBAAAA,cAAc,EAAE;AAAjB,iBAAd;AACD,eAFc,EAEZ,IAFY,CAAV;AAGV,aAVC;AAUC,WAbX;AAcD;AACN;AACF,KAlCY;;AAET,SAAKF,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAI,EADC;AAEXC,MAAAA,cAAc,EAAE,EAFL;AAGXC,MAAAA,UAAU,EAAE;AAHD,KAAb;AAKD;;AA6BDO,EAAAA,iBAAiB,GAAE;AACX,QAAIC,GAAG,GAAG,CAAV;AACA,QAAIC,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,EAAhB,EAAoBA,CAAC,EAArB,EAAwB;AACtBD,MAAAA,IAAI,CAACE,IAAL,CAAU;AAACH,QAAAA,GAAG,EAAEA,GAAG,EAAT;AAAaH,QAAAA,GAAG,EAAE,UAAQK,CAAR,GAAU;AAA5B,OAAV;AACAD,MAAAA,IAAI,CAACE,IAAL,CAAU;AAACH,QAAAA,GAAG,EAAEA,GAAG,EAAT;AAAaH,QAAAA,GAAG,EAAE,UAAQK,CAAR,GAAU;AAA5B,OAAV;AAED;;AACDpB,IAAAA,OAAO,CAACmB,IAAD,CAAP;AACA,SAAKN,QAAL,CAAc;AAACL,MAAAA,MAAM,EAAEW;AAAT,KAAd;AACH;;AAILG,EAAAA,MAAM,GAAE;AAAA,yBACuC,KAAKf,KAD5C;AAAA,UACCC,MADD,gBACCA,MADD;AAAA,UACSC,cADT,gBACSA,cADT;AAAA,UACyBC,UADzB,gBACyBA,UADzB;AAEN,QAAIa,UAAU,GAAGf,MAAM,CAACgB,GAAP,CAAWC,OAAO,IAAI;AACrC,aAAO,oBAAC,KAAD;AACG,QAAA,GAAG,EAAEA,OAAO,CAACP,GADhB;AAEG,QAAA,EAAE,EAAEO,OAAO,CAACP,GAFf;AAGG,QAAA,KAAK,EAAEO,OAAO,CAACV,GAHlB;AAIG,QAAA,WAAW,EAAE,KAAKV,WAJrB;AAKG,QAAA,KAAK,EAAEK,UAAU,CAACC,QAAX,CAAoBc,OAApB,CALV;AAMG,QAAA,QAAQ,EAAEhB,cAAc,CAACE,QAAf,CAAwBc,OAAxB,CANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAQD,KATgB,CAAjB;AAWA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAK,MAAA,KAAK,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG;AAAK,MAAA,GAAG,EAAEvB,IAAV;AAAgB,MAAA,GAAG,EAAC,SAApB;AAA8B,MAAA,KAAK,EAAC,kBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADD,EAIM;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIqB,UADJ,CADD,CAJN,CAFD,CADF;AAeD;;AAhF4B;;AAoFnC,eAAepB,UAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport {shuffle} from '../utils'\r\nimport Image from './Image'\r\nimport logo from '../Resources/logo.png';\r\n\r\n\r\nclass MemoryGame extends Component {\r\n\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n          images  : [],\r\n          selectedImages: [],\r\n          foundPairs: []\r\n        }\r\n      }\r\n\r\n      handleClick = (imageID) => {\r\n        const {images, selectedImages, foundPairs} = this.state;\r\n        //do logic only if the image is not already guessed or selected \r\n        if (!(foundPairs.includes(images[imageID]) || selectedImages.includes(images[imageID]))){\r\n          //if it's the first image of the guessed pair then just add it to the array\r\n          if (selectedImages.length===0){\r\n            this.setState({selectedImages: [images[imageID]]})\r\n          //if it's is the second image of the guessed pair then check if both images are equal and reset selected images\r\n          } else if (selectedImages.length===1){\r\n              this.setState((prevState) => { \r\n                return {selectedImages: [...prevState.selectedImages,images[imageID]]}\r\n              } , () => {\r\n                        this.setState((prevState)=> {\r\n                          const { selectedImages, foundPairs} = prevState;\r\n                          if (selectedImages[0].url===selectedImages[1].url){\r\n                              return {\r\n                                foundPairs: [...foundPairs,selectedImages[0],selectedImages[1]],\r\n                                selectedImages: []\r\n                              }\r\n                          } else setTimeout(() => {\r\n                              this.setState({selectedImages: []})\r\n                            }, 3000);\r\n                      })})\r\n            } \r\n      }\r\n    }\r\n    \r\n      componentDidMount(){\r\n              var key = 0;\r\n              var urls = [];\r\n              for (var i=0; i<12; i++){\r\n                urls.push({key: key++, url: \"Cats/\"+i+\".jpg\"});\r\n                urls.push({key: key++, url: \"Cats/\"+i+\".jpg\"});\r\n\r\n              }\r\n              shuffle(urls);\r\n              this.setState({images: urls})\r\n          }\r\n      \r\n      \r\n\r\n      render(){\r\n        const {images, selectedImages, foundPairs} = this.state;\r\n        var imagesComp = images.map(element => {\r\n          return <Image \r\n                    key={element.key} \r\n                    id={element.key}\r\n                    image={element.url}  \r\n                    handleClick={this.handleClick}\r\n                    found={foundPairs.includes(element)}\r\n                    selected={selectedImages.includes(element)}\r\n                  />\r\n        });\r\n        \r\n        return (\r\n          <div>\r\n\r\n           <div className=\"container\">\r\n            <div class=\"text-center\">\r\n               <img src={logo} alt=\"loading\" class=\"image responsive\"/>\r\n            </div>\r\n                 <div className=\"container\">\r\n                  <div className=\"row mt-5\">\r\n                     {imagesComp}\r\n                   </div>\r\n                 </div>\r\n           </div>\r\n          </div>\r\n        )\r\n      }\r\n    \r\n}\r\n\r\nexport default MemoryGame;   \r\n"]},"metadata":{},"sourceType":"module"}
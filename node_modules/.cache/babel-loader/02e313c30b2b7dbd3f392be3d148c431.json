{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = fireworks;\n\nfunction fireworks(opts) {\n  if (!opts) {\n    throw new Error('Missing options for fireworks');\n  }\n\n  let x = opts.x,\n      y = opts.y,\n      _opts$colors = opts.colors,\n      colors = _opts$colors === void 0 ? [] : _opts$colors,\n      _opts$count = opts.count,\n      bubbleCount = _opts$count === void 0 ? 25 : _opts$count,\n      _opts$parentNode = opts.parentNode,\n      parentNode = _opts$parentNode === void 0 ? document.body : _opts$parentNode;\n  let particles = [];\n  let ratio = window.devicePixelRatio;\n  let cvs = document.createElement('canvas');\n  let ctx = cvs.getContext('2d');\n\n  if (!ctx) {\n    console.log(`fireworks: unable to get 2d canvas context`);\n    return;\n  }\n\n  cvs.style.position = 'absolute';\n  cvs.style.left = `${x - 150}px`;\n  cvs.style.top = `${y - 150}px`;\n  cvs.style.pointerEvents = 'none';\n  cvs.style.width = `${300}px`;\n  cvs.style.height = `${300}px`;\n  cvs.style.zIndex = '100';\n  cvs.width = 300 * ratio;\n  cvs.height = 300 * ratio;\n  parentNode.appendChild(cvs);\n\n  for (let i = 0; i < bubbleCount; i++) {\n    particles.push({\n      x: cvs.width / 2,\n      y: cvs.height / 2,\n      radius: randomRange(10, 25),\n      color: colors[Math.floor(Math.random() * colors.length)],\n      rotation: randomRange(0, 360, -1),\n      speed: randomRange(6, 10),\n      friction: 0.96,\n      opacity: randomRange(0, 0.5, -1),\n      yVel: 0,\n      gravity: 0.05\n    });\n  }\n\n  render(cvs.width, cvs.height, particles, ctx);\n  setTimeout(function () {\n    parentNode.removeChild(cvs);\n  }, 1000);\n}\n\nexports.fireworks = fireworks;\n\nfunction render(width, height, particles, ctx) {\n  requestAnimationFrame(() => {\n    render(width, height, particles, ctx);\n  });\n  ctx.clearRect(0, 0, width, height);\n  particles.forEach(function (p, i) {\n    p.x += p.speed * Math.cos(p.rotation * Math.PI / 180);\n    p.y += p.speed * Math.sin(p.rotation * Math.PI / 180);\n    p.opacity -= 0.005;\n    p.speed *= p.friction;\n    p.radius *= p.friction;\n    p.yVel += p.gravity;\n    p.y += p.yVel;\n\n    if (p.opacity < 0 || p.radius < 0) {\n      return;\n    }\n\n    ctx.beginPath();\n    ctx.globalAlpha = p.opacity;\n    ctx.fillStyle = p.color;\n    ctx.arc(p.x, p.y, p.radius, 0, 2 * Math.PI, false);\n    ctx.fill();\n  });\n  return ctx;\n}\n\nfunction randomRange(a, b, c = 0) {\n  return parseFloat((Math.random() * ((a ? a : 1) - (b ? b : 0)) + (b ? b : 0)).toFixed(c > 0 ? c : 0));\n}","map":null,"metadata":{},"sourceType":"script"}
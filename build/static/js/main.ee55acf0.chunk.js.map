{"version":3,"sources":["utils.js","Components/Image.js","Components/Board.js","Components/MemoryGame.js","Components/Option.js","Components/Settings.js","Components/Sidebar.js","App.js","index.js"],"names":["generateRandomNumbers","totalNumOfImages","randomNumbers","newNumber","Math","floor","random","includes","push","a","j","x","i","length","shuffle","gridStyleArr","Image","this","props","id","image","handleClick","found","selected","boardSize","classNames","undefined","style","opacity","gridStyle","className","src","alt","onClick","event","target","Component","Board","images","hardGamePairNums","advancedGamePairNums","mediumGamePairNums","easyGamePairNums","MemoryGame","imageID","state","selectedImages","foundPairs","setState","prevState","url","setTimeout","stringLevelToNumber","gameLevel","updateBoard","imageType","urls","map","element","index","key","imagesComp","Option","optionType","optionsData","onChange","res","name","type","value","toLowerCase","checked","width","Settings","handleTypeChange","handleLevelChange","handleResetGame","Bar","sidebarOpen","onSetSidebarOpen","bind","open","sidebar","onSetOpen","styles","background","touchHandleWidth","App","game","handleCanvas","canvas","ctx","getContext","fillStyle","fillRect","Sidebar","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee55acf0.chunk.js","sourcesContent":["\r\n\r\nconst IMAGES_DATA_SIZE = 90;\r\n\r\nexport const shuffle = (a) => {\r\n  var j, x, i;\r\n  for (i = a.length - 1; i > 0; i--) {\r\n      j = Math.floor(Math.random() * (i + 1));\r\n      x = a[i];\r\n      a[i] = a[j];\r\n      a[j] = x;\r\n  }\r\n  return a;\r\n}\r\n\r\n\r\nexport const generateRandomNumbers = (totalNumOfImages) =>{\r\n  var randomNumbers = [];\r\n  var newNumber = 0;\r\n  while (totalNumOfImages > 0){\r\n    newNumber = Math.floor(Math.random() * IMAGES_DATA_SIZE);\r\n    if (!randomNumbers.includes(newNumber)){\r\n      randomNumbers.push(newNumber);\r\n      totalNumOfImages--;\r\n    }\r\n  }\r\n  randomNumbers = [...randomNumbers,...randomNumbers];\r\n  shuffle(randomNumbers);\r\n  return randomNumbers;\r\n}","import React, {Component} from 'react';\r\n\r\nconst hidden = \"pictures/structure/hidden.png\"\r\nconst gridStyleHard = \"col-3 col-md-2\"\r\nconst gridStyleAdvanced = \"col-4 col-md-2\"\r\nconst gridStyleMedium = \"col-4 col-md-3\"\r\nconst gridStyleEasy = \"col-4\"\r\nconst gridStyleArr=[gridStyleEasy,gridStyleMedium,gridStyleAdvanced,gridStyleHard]\r\n\r\nconst imageStyle = \"img-thumbnail image-container\"\r\nconst imageAnimated = \"animated flip delay-0s\";\r\n\r\nclass Image extends Component {\r\n   \r\n    render(){\r\n\r\n        const {id, image, handleClick, found, selected, boardSize} = this.props;\r\n        var classNames = selected? imageAnimated : undefined\r\n        var style = found? {opacity: 0.5} : {opacity: 1};\r\n        var gridStyle = gridStyleArr[(boardSize/3)-1];\r\n\r\n        return (\r\n            <div className={gridStyle}>\r\n                    <div className={imageStyle}>\r\n                    <img \r\n                        id={id} \r\n                        className={classNames}\r\n                        src={(found || selected)? image : hidden} \r\n                        alt=\"Loading\" \r\n                        onClick={(event) => handleClick(event.target.id)}\r\n                        style={style}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Image;   \r\n\r\n","\r\nimport React, {Component} from 'react';\r\n\r\n\r\nclass Board extends Component {\r\n\r\n\r\n    render(){\r\n        const {images} = this.props\r\n        \r\n        return (\r\n          <div>\r\n           <div className=\"container-fluid\">  \r\n              <div className=\"text-center\">\r\n               <img src=\"pictures/titles/logo.png\" alt=\"loading\" className=\"image\"/>\r\n               </div>\r\n                  <div className=\"row\">\r\n                     {images}\r\n                   </div>\r\n           </div>\r\n          </div>\r\n        )\r\n      }\r\n\r\n}\r\n\r\nexport default Board","import React, {Component} from 'react';\r\nimport {generateRandomNumbers} from '../utils'\r\nimport Image from './Image'\r\nimport Board from './Board'\r\n\r\nconst hardGamePairNums = 12 ; \r\nconst advancedGamePairNums = 9; \r\nconst mediumGamePairNums = 6; \r\nconst easyGamePairNums = 3; \r\n\r\n\r\nclass MemoryGame extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n          images  : [],\r\n          selectedImages: [],\r\n          foundPairs: [],\r\n          boardSize: hardGamePairNums\r\n        }\r\n      }\r\n\r\n      handleClick = (imageID) => {\r\n        const {images, selectedImages, foundPairs} = this.state;\r\n        //handle click only if the image is not already guessed or selected \r\n        if (!(foundPairs.includes(images[imageID]) || selectedImages.includes(images[imageID]))){\r\n          //if it's the first image of the guessed pair then just add it to the selectedImage array\r\n          if (selectedImages.length===0){\r\n            this.setState({selectedImages: [images[imageID]]})\r\n          //if it's is the second image of the guessed pair then check if both images are equal and reset selected images\r\n          } else if (selectedImages.length===1){\r\n              this.setState((prevState) => { \r\n                return {selectedImages: [...prevState.selectedImages,images[imageID]]}\r\n              } , () => {\r\n                        this.setState((prevState)=> {\r\n                          const { selectedImages, foundPairs} = prevState;\r\n                          //if both images are equal then add them to foundPairs array\r\n                          if (selectedImages[0].url===selectedImages[1].url){\r\n                              return {\r\n                                foundPairs: [...foundPairs,selectedImages[0],selectedImages[1]],\r\n                                selectedImages: []\r\n                              }\r\n                          } else setTimeout(() => {\r\n                              this.setState({selectedImages: []})\r\n                            }, 3000);\r\n                      })})\r\n            } \r\n      }\r\n    }\r\n\r\n\r\n      //convert the level game String to the number of images pairs\r\n      stringLevelToNumber = () => {\r\n        const {gameLevel} = this.props;\r\n        return gameLevel===\"hard\"? hardGamePairNums : gameLevel===\"advanced\"? advancedGamePairNums : gameLevel===\"medium\"? mediumGamePairNums : easyGamePairNums;\r\n      }\r\n\r\n\r\n      updateBoard = () =>{\r\n        const {imageType} = this.props;\r\n        var boardSize = this.stringLevelToNumber();\r\n        var urls = generateRandomNumbers(boardSize);\r\n        urls = urls.map((element, index) => { \r\n          return {key: index, url: \"pictures/\"+imageType+\"/\"+element+\".jpg\"}\r\n        })\r\n        this.setState({images: urls, boardSize: boardSize})\r\n      }\r\n      \r\n      \r\n      componentDidMount(){\r\n        this.updateBoard();\r\n      }\r\n      \r\n      \r\n      render(){\r\n        const {images, selectedImages, foundPairs, boardSize} = this.state;\r\n        var imagesComp = images.map(element => {\r\n          return <Image \r\n                    key={element.key} \r\n                    id={element.key}\r\n                    image={element.url}  \r\n                    handleClick={this.handleClick}\r\n                    found={foundPairs.includes(element)}\r\n                    selected={selectedImages.includes(element)}\r\n                    boardSize={boardSize}\r\n                  />\r\n        });\r\n        \r\n        return (\r\n          <Board images={imagesComp}/>\r\n        )\r\n      }\r\n    \r\n}\r\n\r\nexport default MemoryGame;   \r\n","import React, {Component} from 'react';\r\n\r\nconst typeTitle = \"pictures/titles/type.png\"\r\nconst levelTitle = \"pictures/titles/level.png\"\r\n\r\n\r\nclass Option extends Component {\r\n\r\n\r\n    render(){\r\n        const {optionType, optionsData, selected, onChange} = this.props;\r\n        var res = optionsData.map((name) =>\r\n            <div key={name}>\r\n                <input \r\n                    type=\"radio\"\r\n                    name={optionType}\r\n                    value={name.toLowerCase()}\r\n                    checked={selected === name.toLowerCase()}\r\n                    onChange ={onChange}\r\n                />\r\n                <b className=\"font\">{name}</b>\r\n            </div>\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                {optionType===\"Animal\"?  <img src={typeTitle} style={{width: \"50%\"}} alt=\"none\" /> : <img src={levelTitle} style={{width: \"50%\"}} alt=\"none\" />}\r\n                {res}   \r\n            </div>\r\n        )\r\n      }\r\n\r\n\r\n\r\n}\r\n\r\nexport default Option","import React, {Component} from 'react';\r\nimport Option from './Option'\r\n\r\n\r\nclass Settings extends Component {\r\n\r\n    render(props){\r\n        return (\r\n          <div>\r\n                <Option optionType=\"Animal\" key=\"animal\" optionsData={[\"Cats\",\"Dogs\"]} selected={this.props.imageType} onChange={this.props.handleTypeChange}/>\r\n                <br/>\r\n                <Option optionType=\"Level\" key=\"level\" optionsData={[\"Easy\",\"Medium\",\"Advanced\",\"Hard\"]} selected={this.props.gameLevel} onChange={this.props.handleLevelChange}/>\r\n                <br/>\r\n                <button className=\"btn btn-success\" onClick={this.props.handleResetGame}>Reset Game</button>\r\n          </div>\r\n        )\r\n      }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Settings","import React, {Component} from 'react';\r\nimport Settings from './Settings'\r\nimport Sidebar from \"react-sidebar\";\r\n\r\nconst hamburgerButtonStyle = \"btn btn-outline-success hamburger-btn\";\r\n\r\nclass Bar extends Component {\r\n\r\n  constructor(props) {\r\n\r\n    super(props);\r\n\r\n    this.state = {\r\n        sidebarOpen: false,\r\n    };\r\n    \r\n    this.onSetSidebarOpen = this.onSetSidebarOpen.bind(this);\r\n  }\r\n\r\n  onSetSidebarOpen(open) {\r\n    this.setState({ sidebarOpen: open });\r\n  }\r\n\r\n  render(){\r\n\r\n    return (\r\n      <div  className=\"container\">\r\n        <Sidebar\r\n          sidebar={\r\n            <div className=\"padding\">\r\n               <img src=\"pictures/titles/settings.png\" style={{width: \"100%\"}} alt=\"none\" />\r\n                <br/><br/>\r\n              <Settings \r\n                handleLevelChange={this.props.handleLevelChange} \r\n                handleTypeChange={this.props.handleTypeChange} \r\n                handleResetGame={this.props.handleResetGame} \r\n                imageType={this.props.imageType} \r\n                gameLevel={this.props.gameLevel} \r\n              />\r\n            </div>\r\n          }\r\n          open={this.state.sidebarOpen}\r\n          onSetOpen={this.onSetSidebarOpen}\r\n          styles={{ sidebar: { background: \"DeepSkyBlue\" , width: 200}}}\r\n          touchHandleWidth={0}\r\n        >\r\n        <img className={hamburgerButtonStyle}  src=\"pictures/structure/hamburger.png\"  alt=\"loading\" style={{width: \"8%\", }} onClick={() => this.onSetSidebarOpen(true)} />\r\n      </Sidebar>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Bar;\r\n\r\n","import React, {Component} from 'react';\r\nimport MemoryGame from './Components/MemoryGame'\r\nimport Sidebar from './Components/Sidebar'\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n\r\n    super(props);\r\n\r\n    this.state = {\r\n        sidebarOpen: false,\r\n        imageType: \"cats\",\r\n        gameLevel: \"hard\",\r\n        game: () => <MemoryGame imageType={this.state.imageType} gameLevel={this.state.gameLevel}/>\r\n    };\r\n    \r\n  }\r\n\r\n  handleLevelChange = (event) =>{\r\n    this.setState({gameLevel: event.target.value})\r\n  }\r\n\r\n  handleTypeChange = (event) => {\r\n    this.setState({imageType: event.target.value})\r\n  }\r\n\r\n  handleResetGame = (event) => {\r\n    this.setState({game: ()=> <MemoryGame imageType={this.state.imageType} gameLevel={this.state.gameLevel}/>})\r\n  }\r\n\r\n  handleCanvas = (canvas) => {\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.fillStyle = 'purple';\r\n    ctx.fillRect(0, 0, 100, 100);\r\n  }\r\n\r\n  render(){\r\n\r\n\r\n    const MemoryGame = this.state.game;\r\n\r\n    return (\r\n      <div  className=\"container\">\r\n        {/*send handlers and game info to sidebar*/}\r\n        <Sidebar\r\n          handleLevelChange={this.handleLevelChange} \r\n          handleTypeChange={this.handleTypeChange} \r\n          handleResetGame={this.handleResetGame} \r\n          imageType={this.state.imageType} \r\n          gameLevel={this.state.gameLevel} \r\n        />\r\n        <MemoryGame/>\r\n        </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}
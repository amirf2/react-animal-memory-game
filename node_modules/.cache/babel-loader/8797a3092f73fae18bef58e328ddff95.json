{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-animal-memory-game\\\\src\\\\Components\\\\MemoryGame.js\";\nimport React, { Component } from 'react';\nimport { generateRandomNumbers } from '../utils';\nimport Image from './Image';\nimport Board from './Board';\nconst hardGamePairNums = 12;\nconst advancedGamePairNums = 9;\nconst mediumGamePairNums = 6;\nconst easyGamePairNums = 3;\n\nclass MemoryGame extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = imageID => {\n      const _this$state = this.state,\n            images = _this$state.images,\n            selectedImages = _this$state.selectedImages,\n            foundPairs = _this$state.foundPairs; //handle click only if the image is not already guessed or selected \n\n      if (!(foundPairs.includes(images[imageID]) || selectedImages.includes(images[imageID]))) {\n        //if it's the first image of the guessed pair then just add it to the selectedImage array\n        if (selectedImages.length === 0) {\n          this.setState({\n            selectedImages: [images[imageID]]\n          }); //if it's is the second image of the guessed pair then check if both images are equal and reset selected images\n        } else if (selectedImages.length === 1) {\n          this.setState(prevState => {\n            return {\n              selectedImages: [...prevState.selectedImages, images[imageID]]\n            };\n          }, () => {\n            this.setState(prevState => {\n              const selectedImages = prevState.selectedImages,\n                    foundPairs = prevState.foundPairs; //if both images are equal then add them to foundPairs array\n\n              if (selectedImages[0].url === selectedImages[1].url) {\n                return {\n                  foundPairs: [...foundPairs, selectedImages[0], selectedImages[1]],\n                  selectedImages: []\n                };\n              } else setTimeout(() => {\n                this.setState({\n                  selectedImages: []\n                });\n              }, 3000);\n            });\n          });\n        }\n      }\n    };\n\n    this.stringLevelToNumber = () => {\n      const level = this.props.level;\n      return level === \"hard\" ? hardGamePairNums : level === \"advanced\" ? advancedGamePairNums : level === \"medium\" ? mediumGamePairNums : easyGamePairNums;\n    };\n\n    this.updateBoard = () => {\n      const imageType = this.props.imageType;\n      var boardSize = this.stringLevelToNumber();\n      var urls = generateRandomNumbers(boardSize);\n      urls = urls.map((element, index) => {\n        return {\n          key: index,\n          url: imageType + \"/\" + element + \".jpg\"\n        };\n      });\n      this.setState({\n        images: urls,\n        boardSize: boardSize\n      });\n    };\n\n    this.state = {\n      images: [],\n      selectedImages: [],\n      foundPairs: [],\n      boardSize: hardGamePairNums\n    };\n  }\n\n  componentDidMount() {\n    this.updateBoard();\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          images = _this$state2.images,\n          selectedImages = _this$state2.selectedImages,\n          foundPairs = _this$state2.foundPairs,\n          boardSize = _this$state2.boardSize;\n    console.log(boardSize);\n    var imagesComp = images.map(element => {\n      return React.createElement(Image, {\n        key: element.key,\n        id: element.key,\n        image: element.url,\n        handleClick: this.handleClick,\n        found: foundPairs.includes(element),\n        selected: selectedImages.includes(element),\n        boardSize: boardSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      });\n    });\n    return React.createElement(Board, {\n      images: imagesComp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default MemoryGame;","map":{"version":3,"sources":["C:/react-animal-memory-game/src/Components/MemoryGame.js"],"names":["React","Component","generateRandomNumbers","Image","Board","hardGamePairNums","advancedGamePairNums","mediumGamePairNums","easyGamePairNums","MemoryGame","constructor","props","handleClick","imageID","state","images","selectedImages","foundPairs","includes","length","setState","prevState","url","setTimeout","stringLevelToNumber","level","updateBoard","imageType","boardSize","urls","map","element","index","key","componentDidMount","render","console","log","imagesComp"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {generateRandomNumbers} from '../utils'\r\nimport Image from './Image'\r\nimport Board from './Board'\r\n\r\nconst hardGamePairNums = 12 ; \r\nconst advancedGamePairNums = 9; \r\nconst mediumGamePairNums = 6; \r\nconst easyGamePairNums = 3; \r\n\r\n\r\nclass MemoryGame extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n          images  : [],\r\n          selectedImages: [],\r\n          foundPairs: [],\r\n          boardSize: hardGamePairNums\r\n        }\r\n      }\r\n\r\n      handleClick = (imageID) => {\r\n        const {images, selectedImages, foundPairs} = this.state;\r\n        //handle click only if the image is not already guessed or selected \r\n        if (!(foundPairs.includes(images[imageID]) || selectedImages.includes(images[imageID]))){\r\n          //if it's the first image of the guessed pair then just add it to the selectedImage array\r\n          if (selectedImages.length===0){\r\n            this.setState({selectedImages: [images[imageID]]})\r\n          //if it's is the second image of the guessed pair then check if both images are equal and reset selected images\r\n          } else if (selectedImages.length===1){\r\n              this.setState((prevState) => { \r\n                return {selectedImages: [...prevState.selectedImages,images[imageID]]}\r\n              } , () => {\r\n                        this.setState((prevState)=> {\r\n                          const { selectedImages, foundPairs} = prevState;\r\n                          //if both images are equal then add them to foundPairs array\r\n                          if (selectedImages[0].url===selectedImages[1].url){\r\n                              return {\r\n                                foundPairs: [...foundPairs,selectedImages[0],selectedImages[1]],\r\n                                selectedImages: []\r\n                              }\r\n                          } else setTimeout(() => {\r\n                              this.setState({selectedImages: []})\r\n                            }, 3000);\r\n                      })})\r\n            } \r\n      }\r\n    }\r\n\r\n\r\n      //convert the level game String to the number of images pairs\r\n      stringLevelToNumber = () => {\r\n        const {level} = this.props;\r\n        return level===\"hard\"? hardGamePairNums : level===\"advanced\"? advancedGamePairNums : level===\"medium\"? mediumGamePairNums : easyGamePairNums;\r\n      }\r\n\r\n\r\n      updateBoard = () =>{\r\n        const {imageType} = this.props;\r\n        var boardSize = this.stringLevelToNumber();\r\n        var urls = generateRandomNumbers(boardSize);\r\n        urls = urls.map((element, index) => { \r\n          return {key: index, url: imageType+\"/\"+element+\".jpg\"}\r\n        })\r\n        this.setState({images: urls, boardSize: boardSize})\r\n      }\r\n      \r\n      \r\n      componentDidMount(){\r\n        this.updateBoard();\r\n      }\r\n      \r\n      \r\n\r\n      render(){\r\n        const {images, selectedImages, foundPairs, boardSize} = this.state;\r\n        console.log(boardSize)\r\n        var imagesComp = images.map(element => {\r\n          return <Image \r\n                    key={element.key} \r\n                    id={element.key}\r\n                    image={element.url}  \r\n                    handleClick={this.handleClick}\r\n                    found={foundPairs.includes(element)}\r\n                    selected={selectedImages.includes(element)}\r\n                    boardSize={boardSize}\r\n                  />\r\n        });\r\n        \r\n        return (\r\n          <Board images={imagesComp}/>\r\n        )\r\n      }\r\n    \r\n}\r\n\r\nexport default MemoryGame;   \r\n"]},"metadata":{},"sourceType":"module"}
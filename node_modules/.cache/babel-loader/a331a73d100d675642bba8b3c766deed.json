{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Particle2 = require('./Particle.js');\n\nvar _Particle3 = _interopRequireDefault(_Particle2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Smoke = function (_Particle) {\n  _inherits(Smoke, _Particle);\n\n  function Smoke() {\n    _classCallCheck(this, Smoke);\n\n    return _possibleConstructorReturn(this, (Smoke.__proto__ || Object.getPrototypeOf(Smoke)).apply(this, arguments));\n  }\n\n  _createClass(Smoke, [{\n    key: 'render',\n    value: function render(c) {\n      if (!this.exists()) {\n        return;\n      }\n\n      c.save();\n      c.globalCompositeOperation = 'lighter';\n      var _ref = [this.x, this.y, this.size],\n          x = _ref[0],\n          y = _ref[1],\n          size = _ref[2];\n      var gradient = c.createRadialGradient(x, y, 0.1, x, y, size / 2);\n      gradient.addColorStop(0.1, \"rgba(200, 200, 200,\" + this.alpha + \")\");\n      gradient.addColorStop(1, \"rgba(150, 150, 150 ,\" + this.alpha + \")\");\n      c.fillStyle = gradient;\n      c.beginPath();\n      c.arc(x, y, size, 0, Math.PI * 2, true);\n      c.lineTo(x, y);\n      c.closePath();\n      c.fill();\n      c.restore();\n    }\n  }]);\n\n  return Smoke;\n}(_Particle3.default);\n\nexports.default = Smoke;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\boiling-meadow-62855\\\\src\\\\Components\\\\MemoryGame.js\";\nimport React, { Component } from 'react';\nimport { generateRandomNumbers } from '../utils';\nimport Image from './Image';\nimport logo from '../Resources/logo.png';\n\nclass MemoryGame extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = imageID => {\n      const _this$state = this.state,\n            images = _this$state.images,\n            selectedImages = _this$state.selectedImages,\n            foundPairs = _this$state.foundPairs; //do logic only if the image is not already guessed or selected \n\n      if (!(foundPairs.includes(images[imageID]) || selectedImages.includes(images[imageID]))) {\n        //if it's the first image of the guessed pair then just add it to the array\n        if (selectedImages.length === 0) {\n          this.setState({\n            selectedImages: [images[imageID]]\n          }); //if it's is the second image of the guessed pair then check if both images are equal and reset selected images\n        } else if (selectedImages.length === 1) {\n          this.setState(prevState => {\n            return {\n              selectedImages: [...prevState.selectedImages, images[imageID]]\n            };\n          }, () => {\n            this.setState(prevState => {\n              const selectedImages = prevState.selectedImages,\n                    foundPairs = prevState.foundPairs;\n\n              if (selectedImages[0].url === selectedImages[1].url) {\n                return {\n                  foundPairs: [...foundPairs, selectedImages[0], selectedImages[1]],\n                  selectedImages: []\n                };\n              } else setTimeout(() => {\n                this.setState({\n                  selectedImages: []\n                });\n              }, 3000);\n            });\n          });\n        }\n      }\n    };\n\n    this.updateBoard = () => {\n      const _this$props = this.props,\n            type = _this$props.type,\n            level = _this$props.level;\n      var boardSize = level === \"hard\" ? 12 : level === \"advanced\" ? 9 : level === \"medium\" ? 6 : 3;\n      var urls = generateRandomNumbers(boardSize);\n      urls = urls.map((element, index) => {\n        return {\n          key: index,\n          url: type + \"/\" + element + \".jpg\"\n        };\n      });\n      this.setState({\n        images: urls\n      });\n    };\n\n    this.state = {\n      images: [],\n      selectedImages: [],\n      foundPairs: []\n    };\n  }\n\n  componentDidMount() {\n    this.updateBoard();\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          images = _this$state2.images,\n          selectedImages = _this$state2.selectedImages,\n          foundPairs = _this$state2.foundPairs;\n    var imagesComp = images.map(element => {\n      return React.createElement(Image, {\n        key: element.key,\n        id: element.key,\n        image: element.url,\n        handleClick: this.handleClick,\n        found: foundPairs.includes(element),\n        selected: selectedImages.includes(element),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      alt: \"loading\",\n      width: \"50%\",\n      className: \"image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, imagesComp)));\n  }\n\n}\n\nexport default MemoryGame;","map":{"version":3,"sources":["C:/boiling-meadow-62855/src/Components/MemoryGame.js"],"names":["React","Component","generateRandomNumbers","Image","logo","MemoryGame","constructor","props","handleClick","imageID","state","images","selectedImages","foundPairs","includes","length","setState","prevState","url","setTimeout","updateBoard","type","level","boardSize","urls","map","element","index","key","componentDidMount","render","imagesComp"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {generateRandomNumbers} from '../utils'\r\nimport Image from './Image'\r\nimport logo from '../Resources/logo.png';\r\n\r\n\r\nclass MemoryGame extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n          images  : [],\r\n          selectedImages: [],\r\n          foundPairs: [],\r\n        }\r\n      }\r\n\r\n      handleClick = (imageID) => {\r\n        const {images, selectedImages, foundPairs} = this.state;\r\n        //do logic only if the image is not already guessed or selected \r\n        if (!(foundPairs.includes(images[imageID]) || selectedImages.includes(images[imageID]))){\r\n          //if it's the first image of the guessed pair then just add it to the array\r\n          if (selectedImages.length===0){\r\n            this.setState({selectedImages: [images[imageID]]})\r\n          //if it's is the second image of the guessed pair then check if both images are equal and reset selected images\r\n          } else if (selectedImages.length===1){\r\n              this.setState((prevState) => { \r\n                return {selectedImages: [...prevState.selectedImages,images[imageID]]}\r\n              } , () => {\r\n                        this.setState((prevState)=> {\r\n                          const { selectedImages, foundPairs} = prevState;\r\n                          if (selectedImages[0].url===selectedImages[1].url){\r\n                              return {\r\n                                foundPairs: [...foundPairs,selectedImages[0],selectedImages[1]],\r\n                                selectedImages: []\r\n                              }\r\n                          } else setTimeout(() => {\r\n                              this.setState({selectedImages: []})\r\n                            }, 3000);\r\n                      })})\r\n            } \r\n      }\r\n    }\r\n\r\n\r\n\r\n      updateBoard = () =>{\r\n        const {type,level} = this.props;\r\n        var boardSize = level===\"hard\"? 12 : level===\"advanced\"? 9 : level===\"medium\"? 6 : 3;\r\n        var urls = generateRandomNumbers(boardSize);\r\n        urls = urls.map((element, index) => { \r\n          return {key: index, url: type+\"/\"+element+\".jpg\"}\r\n        })\r\n        this.setState({images: urls})\r\n      }\r\n      \r\n      \r\n      componentDidMount(){\r\n        this.updateBoard();\r\n      }\r\n      \r\n      \r\n\r\n      render(){\r\n        const {images, selectedImages, foundPairs} = this.state;\r\n        var imagesComp = images.map(element => {\r\n          return <Image \r\n                    key={element.key} \r\n                    id={element.key}\r\n                    image={element.url}  \r\n                    handleClick={this.handleClick}\r\n                    found={foundPairs.includes(element)}\r\n                    selected={selectedImages.includes(element)}\r\n                  />\r\n        });\r\n        \r\n        return (\r\n          <div>\r\n           <div className=\"container-fluid\">  \r\n               <img src={logo} alt=\"loading\" width=\"50%\" className=\"image\"/>\r\n                  <div className=\"row\">\r\n                     {imagesComp}\r\n                   </div>\r\n           </div>\r\n          </div>\r\n        )\r\n      }\r\n    \r\n}\r\n\r\nexport default MemoryGame;   \r\n"]},"metadata":{},"sourceType":"module"}